{
  "name": "rupture",
  "author": {
    "name": "Jeff Escalante",
    "email": "hello@jenius.me"
  },
  "description": "simple media queries for stylus",
  "version": "0.4.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/jenius/rupture.git"
  },
  "devDependencies": {
    "coffee-script": "*",
    "css-parse": "*",
    "mocha": "*",
    "should": "^4.0.4",
    "stylus": "*"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "readme": "Rupture\n-------\n\n[![npm](http://img.shields.io/npm/v/rupture.svg?style=flat)](http://badge.fury.io/js/rupture)\n[![tests](http://img.shields.io/travis/jenius/rupture/master.svg?style=flat)](https://travis-ci.org/jenius/rupture)\n\nSimple media queries for stylus.\n\n```styl\n.test\n  color: red\n\n  +below(700px)\n    color: blue\n```\n\nInstallation\n------------\n\n`npm install rupture`\n\nAPI Documentation\n-----------------\n\nThe first version of this library is very simple, just providing smooth abbreviations for common breakpoints. All of the functions provided by rupture are [block mixins](http://learnboost.github.io/stylus/docs/mixins.html#block-mixins), which means that they must be called with a `+` prefix and a block of stylus should be nested inside them.\n\nBefore getting started, I would recommend [reading this](https://github.com/lolmaus/breakpoint-slicer#concept) to better understand the concept that we're trying to hit.\n\n### Variables\n\nA few variables are exposed that can be customized, each of them are listed below. All of these variables are scoped under `rupture` so that there are no conflicts with css keywords or other libraries.\n\n##### `rupture.mobile-cutoff`\nPixel value where the `mobile` mixin kicks in, also the lower bound of the `tablet` mixin.\n\n##### `rupture.desktop-cutoff`\nPixel value where the `desktop` mixin kicks in, also the upper bound of the `tablet` mixin.\n\n##### `rupture.scale`\nA list of values that you can reference by index in most of the mixins listed below. This works exactly like [breakpoint-slicer](https://github.com/lolmaus/breakpoint-slicer). Default looks like this:\n\n```js\nrupture.scale = 0 400px 600px 800px 1050px\n```\n\n##### `rupture.scale-names`\nA list of strings you can reference that correspond to their index location in `rupture.scale`. This works exactly like [breakpoint-slicer](https://github.com/lolmaus/breakpoint-slicer#calling-slices-by-names-rather-than-numbers)\n\n```\nrupture.scale =        0        400px       600px      800px        1050px\n\n//                     └────┬────┘ └────┬────┘ └────┬────┘ └────┬────┘ └────┬────\n// Slice numbers:           1           2           3           4           5\nrupture.scale-names:       'xs'        's'         'm'         'l'         'xl'\n```\n\n```js\nrupture.scale-names = 'xs' 's' 'm' 'l' 'xl'\n```\n\n##### `rupture.enable-em-breakpoints`\nEnables Rupture's [PX to EM unit conversion](#px-to-em-unit-conversion) feature. If set to true, pixel breakpoint values will be automatically converted into em values.\n\n##### `rupture.base-font-size`\nDetermines the conversion factor for converting between px and em/rem values. Will default to the global `base-font-size` variable if it is defined, or 16px otherwise. For example, if you want to set the conversion factor at 1em = 10px, you can do:\n\n```js\nrupture.base-font-size = 10px\nhtml\n  font-size: 62.5%\n```\n\n##### `rupture.anti-overlap`\n\nControls Rupture's [anti-overlapping](#scale-overlap) feature. Defaults to `false`.\n\n##### `rupture.density-queries`\nList of values that controls what conditions to include when creating media queries for high resolution displays. Valid values include 'webkit', 'moz', 'o', 'ratio', 'dpi', and 'dppx' The default list is:\n\n```js\nrupture.density-queries = 'dppx' 'webkit' 'moz' 'dpi'\n```\n\nIn general, [you can set this to `'webkit' 'dpi'`](http://www.brettjankord.com/2012/11/28/cross-browser-retinahigh-resolution-media-queries/) to support all modern browsers while limiting the size of the generated media queries.\n\nTo create a media query that only targets devices with a high pixel density, either use the `density()` or `retina()` mixins or pass a `density` keyword argument to any of the other mixins. Values passed to the `density` mixin or keyword argument should be a unitless pixel-ratio (1 for 96dpi, 2 for 192dpi, etc). For example, to target phones with a pixel density of at least 1.25, you can do:\n\n```js\n+mobile(density: 1.25)\n```\n\n##### `rupture.retina-density`\nValue which controls the minimum density of a device considered to have a retina display. Defaults to 1.5. This value will be used when you call the `retina()` mixin or pass `density: 'retina'` as a keyword argument to any of the width mixins. For example, to target retina tablets, you can do:\n\n```js\n+tablet(density: 'retina') // equivalent to +tablet(density: 1.5) unless you change rupture.retina-density\n```\n\n\n##### `rupture.use-device-width`\nValue which toggles the `min-width` and `max-width` media query conditions to `min-device-width` and `max-device-width`.\ndefaults to `false`\n\nAlso you can pass it as named argument to override behavior of rupture.use-device-width value:\n\n```js\n+to(2, use-device-width: true)\n```\n\n### Mixins\n\nSo there are two \"categories\" of mixins that are a part of rupture. The first is a very basic set designed to simply shorten and sweeten standard media queries, and the second is a very close port of the fantastic [breakpoint-slicer](https://github.com/lolmaus/breakpoint-slicer) library, which can be used almost as a grid. We'll go through these in order.\n\n##### `+above(measure)`\nWhen the screen size is _above_ the provided [measure](#what-is-a-measure), the styles in the block will take effect.\n\n##### `+from(measure)`\nAlias of `above`. Styles take effect from the provided [measure](#what-is-a-measure) and above.\n\n##### `+below(measure)`\nWhen the screen size is _below_ the provided [measure](#what-is-a-measure), the styles in the block will take effect.\n\n##### `+to(measure)`\nAlias of `below`. Styles take effect from zero up to the provided [measure](#what-is-a-measure).\n\n##### `+between(measure, measure)`\nWhen the screen size is _between_ the two provided [measure](#what-is-a-measure), the styles in the block will take effect.\n\n##### `+at(measure)`\nIntended for use with scale measures, when the screen size is between the provided scale [measure](#what-is-a-measure) and the one below it, the styles in the block will take effect. For example, if your scale was something like `rupture.scale = 0 400px 600px`, and you used the mixin like `+at(2)`, it would kick in between 400 and 600px (remember, scale is zero indexed, so 2 is the third value, and one less is the second). If you use this with a value, it will not have much effect, as it will be at one specific pixel value rather than a range like you want.\n\n##### `+mobile()`\nWhen the screen size is 400px (defined by `rupture.mobile-cutoff`) or less, the styles in the block will take effect.\n\n##### `+tablet()`\nWhen the screen size is between 1050px (defined by `rupture.desktop-cutoff`) and 400px (defined by `mobile-cutoff`), the styles in the block will take effect.\n\n##### `+desktop()`\nWhen the screen size is 1050px (defined by `rupture.desktop-cutoff`) or more, the styles in the block will take effect.\n\n##### `+density(value)`\nWhen the device has a pixel density of at least the given `value`, the styles in the block will take effect. The `value` should be a unitless pixel ratio number such as `1`, `1.5`, or `2`. The `value` can also be the string `'retina'`, in which case the `rupture.retina-density` variable will be used.\n\n##### `+retina()`\nWhen the device has a pixel density of over `rupture.retina-density` (defaults to 1.5), the styles in the block will take effect.\n\n##### `+landscape()`\nWhen the viewport is wider than it is tall, the styles in the block will take effect. You can also pass `orientation: landscape` as a keyword argument to any of the other mixins except `portrait()`:\n\n```js\n+tablet(orientation: landscape)\n```\n\n##### `+portrait()`\nWhen the viewport is taller than it is wide, the styles in the block will take effect. You can also pass `orientation: portrait` as a keyword argument to any of the other mixins except `landscape()`:\n\n```js\n+mobile(orientation: portrait)\n```\n\n### PX to EM unit conversion\n\nIt is a popular opinion that using `em` units for media queries is a good practice, and [for good reason](http://blog.cloudfour.com/the-ems-have-it-proportional-media-queries-ftw/).\n\nRupture allows you to automatically convert all your breakpoint units from `px` to `em`.\n\nAll you need to do to enable this behavior is to define an optional `rupture.base-font-size` (unless already defined) and set `rupture.enable-em-breakpoints` to `true`.\n\n`rupture.base-font-size` defaults to `16px`.\n\nExample:\n\n```\n// base-font-size = 18px (commented out because it's optional and we want 16px)\nrupture.enable-em-breakpoints = true\n\n.some-ui-element\n  width: 50%\n  float: left\n  +below(500px)\n    width: 100%\n    float: none\n\n/**\n * compiles to:\n *\n * .some-ui-element {\n *   width: 50%;\n *   float: left;\n * }\n * @media screen and (max-width: 31.25em) {\n *   .some-ui-element {\n *     width: 100%;\n *     float: none;\n *   }\n * }\n */\n```\n\n### Scale overlap\n\nYou can prevent scale slices from overlapping with neighbouring slices by setting the [`rupture.anti-overlap`][#enable-anti-overlap] variable. This variable can contain a list of offset values for different units, which will be applied to your media queries so they do not overlap. The offset value(s) can be positive or negative, indicating how they should affect the media query arguments. If you provide a single value such as `1px` but you are using em breakpoints, Rupture can convert the offset to the correct unit based on the `rupture.base-font-size` variable.\n\nAlternatively, you can set `rupture.anti-overlap` to `true` or any falsy value, which are equivalent to `1px` and `0px`, respectively. Here are some examples:\n\n```js\nrupture.anti-overlap = false // default value\nrupture.anti-overlap = true // enables 1px (or em equivalent) overlap correction globally\nrupture.anti-overlap = 0px // same as rupture.anti-overlap = false\nrupture.anti-overlap = 1px // same as rupture.anti-overlap = true\nrupture.anti-overlap = -1px // negative offsets decrease the `max-width` arguments\nrupture.anti-overlap = 0.001em // positive offsets increase the `min-width` arguments\nrupture.anti-overlap = 1px 0.0625em 0.0625rem // explicit relative values will be used if they are provided instead of calculating them from the font size\n```\n\nIf you don't want to enable anti-overlapping globally, you can enable or disable it locally by passing the `anti-overlap` keyword argument to any of the mixins except `retina()`. This works exactly like the global `rupture.anti-overlap` variable, except you can specify it per mixin call. For example:\n\n```\n.overlap-force\n  text-align center\n  +at(2, anti-overlap: true)\n    text-align right\n  +at(3, anti-overlap: false)\n    text-align left\n  +from(4, anti-overlap: 1px)\n    text-align justify\n  +to(4, anti-overlap: 0.0625em)\n    border 1px\n  +from(5, anti-overlap: 0.0625rem)\n    text-align justify\n  +tablet(anti-overlap: 1px 0.0625em 0.0625rem)\n    font-weight bold\n  +mobile(anti-overlap: true)\n    font-weight normal\n  +desktop(anti-overlap: true)\n    font-style italic\n```\n\nThe `anti-overlap` offset list may contain positive or negative values. Positive values will increase the media query's `min-width` argument, while negative values will decrease the `max-width` argument.\n\nFor example, with a positive offset:\n\n```\nrupture.scale = 0 400px 800px 1200px\nrupture.anti-overlap = 1px\n\n.some-ui-element\n  text-align center\n  +at(2)\n    text-align right\n  +at(3)\n    text-align left\n\n/**\n  * compiles to:\n  * .some-ui-element {\n  *     text-align:center;\n  * }\n  * @media only screen and (min-width: 401px) and (max-width: 800px) {\n  *     .some-ui-element {\n  *         text-align:right;\n  *     }\n  * }\n  * @media only screen and (min-width: 801px) and (max-width: 1200px) {\n  *    .some-ui-element {\n  *         text-align:left;\n  *     }\n  * }\n  */\n```\n\nWith a negative offset (and em breakpoints):\n\n```\nrupture.scale = 0 400px 800px 1200px\nrupture.anti-overlap = -1px\nrupture.enable-em-breakpoints = true\n\n.some-ui-element\n  text-align center\n  +at(2)\n    text-align right\n  +at(3)\n    text-align left\n\n/**\n * compiles to:\n * .some-ui-element {\n *     text-align:center;\n * }\n * @media only screen and (min-width: 25em) and (max-width: 49.9375em) {\n *     .some-ui-element {\n *         text-align:right;\n *     }\n * }\n * @media only screen and (min-width: 50em) and (max-width: 74.9375em) {\n *     .some-ui-element {\n *         text-align:left;\n *     }\n * }\n*/\n```\n\nMore examples can be found in [`tests/overlap.styl`](test/fixtures/overlap.styl).\n\n### What is a \"measure\"?\n\nWhen I say \"measure\" in any of the docs above, this could mean either pixels (like `500px`), ems (like `20em`), or an index on the `scale` (like `2`). Scale indices will be converted from the index to whatever the value is at that index in the `scale` variable. The scale starts at a zero-index.\n\nUsage\n-----\n\nYou can use this library in a couple different ways - I'll try to cover the most common here. First, if you are building your own stylus pipeline:\n\n```js\nvar stylus = require('stylus'),\n    rupture = require('rupture');\n\nstylus(fs.readFileSync('./example.styl', 'utf8'))\n  .use(rupture())\n  .render(function(err, css){\n    if (err) return console.error(err);\n    console.log(css);\n  });\n```\n\nSecond, you can use it when compiling stylus from the command line, if you install with `npm install rupture -g`. Not recommended, but some people like it this way.\n\n```\n$ stylus -u rupture -c example.styl\n```\n\nFinally, you might want to use it with [express](http://expressjs.com):\n\n```js\nvar express = require('express'),\n    stylus = require('stylus'),\n    rupture = require('rupture');\n\n... etc ...\n\napp.configure(function () {\n  app.use(stylus.middleware({\n    src: __dirname + '/views',\n    dest: __dirname + '/public',\n    compile: function (str, path, fn) {\n      stylus(str)\n        .set('filename', path)\n        .use(rupture())\n        .render(fn);\n    }\n  }));\n});\n\n... etc ...\n```\n\nThis plugin is also be compatible with [roots](http://roots.cx), the most awesome static compiler on the market (totally unbiased), although right now we are between releases, so I'll document it here once the next release is in beta at least.\n\nAlso, rupture automatically loads its mixins into all stylus files by default. If you'd like to prevent this and load it yourself with `@import 'rupture'` where you need it, you can pass `{implict: false}` to the main function when you execute it. It would look something like this:\n\n```js\n.use(rupture({ implicit: false }))\n```\n\nMiscellaneous\n-------------\n\n### Compatibility\n\nRupture is only compatible with stylus version `0.41.0` and up. If things are totally broken, check your stylus version and make sure you are up to date! This is especially true if you are experiencing errors with `display: block` - this is due to a bug in older versions of Stylus, and the only fix that isn't an ugly hack is to update to the latest version of Stylus.\n\n### License\n\nLicensed under MIT, [see license &raquo;](license.md)\n\n### Contributing\n\nSee the [contributing guide &raquo;](contributing.md)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/jenius/rupture/issues"
  },
  "homepage": "https://github.com/jenius/rupture",
  "_id": "rupture@0.4.0",
  "_shasum": "311445a25018f49d37fdff7b4f41b4c6cb6b19ae",
  "_resolved": "git://github.com/jenius/rupture#d0fd5647e8f4de10df5098d7723e85f8668ea4d0",
  "_from": "rupture@git://github.com/jenius/rupture#v0.4.0"
}
